(()=>{"use strict";const e=[[6,null,2],[3,4,8],[7,1,5]],t=[{x:0,y:-1,name:"⇐"},{x:-1,y:0,name:"⇑"},{x:0,y:1,name:"⇒"},{x:1,y:0,name:"⇓"}],o=(e,t,o=!0)=>{console.log(`Index of the state ${t}`);let n="";for(let t of e){const e=t.map((e=>e||" "));n+="-------------\n",n+=`| ${e[0]} | ${e[1]} | ${e[2]} |\n`}return n+="-------------\n",o&&console.log(n),n},n=e=>{let t={x:0,y:0,name:"empty"};e:for(let o=0;o<e[0].length;++o)for(let n=0;n<e.length;++n)if(null===e[o][n]){t.x=o,t.y=n;break e}return t},l=e=>e.x>=3||e.x<0||e.y>=3||e.y<0;class s{constructor(e,t,n,l,s){this.getState=()=>this.state,this.getMoves=()=>this.operator,this.getDepth=()=>this.depth,this.pathFromStart=()=>{let e=[],t=[],n=this;do{e.push(n?.getState()),t.push(n?.getMoves()),n=n?.parent,n.parent||e.push(n?.getState())}while(0!==n?.getDepth());e.reverse(),t.reverse();let l=1;for(const t of e)o(t,l),l++;return console.log(`Кількість переміщень: ${t.length}`),console.log(`Переміщення по порядку: ${t.join(", ")}\n`),t},this.state=e,this.parent=t,this.operator=n,this.depth=l,this.cost=s}}let r={currentState:null,moves:0,settled:0,dropped:0,depth:0,haveSolution:!1};(()=>{let a=[{state:e,index:1}];{const e=document.querySelector(".next"),i=document.querySelector(".result"),c=document.querySelector(".find");e.setAttribute("disabled","true"),i.setAttribute("disabled","true");const d=document.getElementById("results");let h=0;e?.addEventListener("click",(()=>{const e=document.createElement("table");e.className+="table table-primary table-hover table-bordered table-sm align-middle caption-top",e.style.width="200px",e.style.height="200px",e.style.textAlign="center",e.insertAdjacentHTML("afterbegin",`\n               <caption class="fw-bold text-primary">Index of the state is ${a[h].index}</caption>\n            `);const t=document.createElement("tbody");for(let e of a[h].state){const o=t.insertRow();for(let t of e){const e=o.insertCell();e.classList.add("align-middle"),e.innerHTML=t?String(t):" "}}e.appendChild(t),d?.appendChild(e),d.scrollTop=d.scrollHeight,o(a[h].state,a[h].index),h++})),i?.addEventListener("click",(()=>{r.haveSolution?(console.log("Порядок переміщень для розв'язку гри в 8 :"),r?.currentState?.pathFromStart(),console.log(`Кількість відвіданих станів : ${r.moves}`),console.log(`Кількість станів занесених у БД : ${r.settled} `),console.log(`Кількість відкинутих станів : ${r.dropped}`),console.log(`Глибина дерева пошуку на якій знайдено рішення : ${r.depth}`)):(console.log(`Кількість відвіданих станів : ${r.moves}`),console.log(`Кількість станів занесених у БД : ${r.settled} `),console.log(`Кількість відкинутих станів : ${r.dropped}`),console.log("Гра у 8 немає розв'язків"))})),c?.addEventListener("click",(()=>{const o=e=>{const t=[];for(let o of e.rows){const e=[];for(let t of o.cells){const o=parseInt(t.innerHTML);Number.isNaN(o)?e.push(null):e.push(o)}t.push(e)}return t},c=document.querySelector(".initial-state"),u=document.querySelector(".final-state"),p=o(c),g=o(u),m=[{state:p,index:1}];h=0,d.innerHTML=null,a=function(e,o,a){const i=new Map;i.set(e.toString(),!0);const c=[new s(e,null,null,0,0)];let d=0,h=0;for(;c.length;){let e=c.shift();if(r={currentState:e,moves:d,settled:i.size,dropped:h,depth:e.getDepth(),haveSolution:!1},u=o,e.getState()?.toString()===u?.toString())return r.haveSolution=!0,a;const p=n(e.getState());t.forEach((t=>{const o=e?.getState()?.map((e=>[...e])),n={x:p.x+t.x,y:p.y+t.y,name:t.name};l(n)||([o[p.x][p.y],o[n.x][n.y]]=[o[n.x][n.y],o[p.x][p.y]],i.get(o.toString())?h++:(c.push(new s(o,e,t.name,e.getDepth()+1,0)),i.set(o.toString(),!0),a.push({state:o,index:d+2})),d++)}))}var u;return a}(p,g,m),e.disabled=!1,i.disabled=!1}))}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,