(()=>{"use strict";const e=[[6,null,2],[3,4,8],[7,1,5]],t=[{x:0,y:-1,name:"⇐"},{x:-1,y:0,name:"⇑"},{x:0,y:1,name:"⇒"},{x:1,y:0,name:"⇓"}],n=(e,t,n=!0)=>{console.log(`Index of the state ${t}`);let o="";for(let t of e){const e=t.map((e=>e||" "));o+="-------------\n",o+=`| ${e[0]} | ${e[1]} | ${e[2]} |\n`}return o+="-------------\n",n&&console.log(o),o},o=e=>{let t={x:0,y:0,name:"empty"};e:for(let n=0;n<e[0].length;++n)for(let o=0;o<e.length;++o)if(null===e[n][o]){t.x=n,t.y=o;break e}return t},s=e=>e.x>=3||e.x<0||e.y>=3||e.y<0;class l{constructor(e,t,o,s,l){this.getState=()=>this.state,this.getMoves=()=>this.operator,this.getDepth=()=>this.depth,this.pathFromStart=()=>{let e=[],t=[],o=this;do{e.push(o?.getState()),t.push(o?.getMoves()),o=o?.parent,o.parent||e.push(o?.getState())}while(0!==o?.getDepth());e.reverse(),t.reverse();let s=1;for(const t of e)n(t,s),s++;return console.log(`Кількість переміщень: ${t.length}`),console.log(`Переміщення по порядку: ${t.join(", ")}\n`),t},this.state=e,this.parent=t,this.operator=o,this.depth=s,this.cost=l}}let r={currentState:null,moves:0,settled:0,dropped:0,depth:0,haveSolution:!1};(()=>{let a=[{state:e,index:1}];const d=document.querySelector(".next"),c=document.querySelector(".result"),i=document.querySelector(".find"),p=document.getElementById("result-content");let h=0;const u=document.getElementById("results");d.disabled=!0,c.disabled=!0,d?.addEventListener("click",(()=>{const e=document.createElement("table");e.className+="table table-primary table-hover table-bordered table-sm align-middle caption-top",e.style.width="200px",e.style.height="200px",e.style.textAlign="center",e.insertAdjacentHTML("afterbegin",`\n               <caption class="fw-bold text-primary">\n                  Index of the state is ${a[h].index}\n               </caption>\n            `);const t=document.createElement("tbody");for(let e of a[h].state){const n=t.insertRow();for(let t of e){const e=n.insertCell();e.classList.add("align-middle"),e.innerHTML=t?String(t):" "}}e.appendChild(t),u?.appendChild(e),u.scrollTop=u.scrollHeight,n(a[h].state,a[h].index),h++})),c?.addEventListener("click",(()=>{p.innerHTML="",r.haveSolution?(console.log("Порядок переміщень для розв'язку гри в 8:"),r?.currentState?.pathFromStart(),console.log(`Кількість відвіданих станів: ${r.moves}`),console.log(`Кількість станів занесених у БД: ${r.settled}`),console.log(`Кількість відкинутих станів: ${r.dropped}`),console.log(`Глибина дерева пошуку на якій знайдено рішення: ${r.depth}`),p.insertAdjacentHTML("beforeend",`\n            <code>\n            <pre>Кількість відвіданих станів: ${r.moves}<br>Кількість станів занесених у БД: ${r.settled}<br>Кількість відкинутих станів: ${r.dropped}<br>Глибина дерева пошуку на якій знайдено рішення: ${r.depth}</pre>\n            </code>\n         `)):(console.log(`Кількість відвіданих станів: ${r.moves}`),console.log(`Кількість станів занесених у БД: ${r.settled}`),console.log(`Кількість відкинутих станів: ${r.dropped}`),console.log("Гра у 8 немає розв'язків"),p.insertAdjacentHTML("beforeend",`\n            <code>\n            <pre>Кількість відвіданих станів : ${r.moves}<br>Кількість станів занесених у БД : ${r.settled}<br>Кількість відкинутих станів : ${r.dropped}<br>Гра у 8 немає розв'язків</pre>\n            </code>\n         `))})),i?.addEventListener("click",(()=>{const e=e=>{const t=[];for(let n of e.rows){const e=[];for(let t of n.cells){const n=parseInt(t.innerHTML);Number.isNaN(n)?e.push(null):e.push(n)}t.push(e)}return t},n=document.querySelector(".initial-state"),i=document.querySelector(".final-state"),p=e(n),g=e(i);h=0,u.innerHTML=null,a=function(e,n,a){const d=new Map;d.set(e.toString(),!0);const c=[new l(e,null,null,0,0)];let i=0,p=0;for(;c.length;){let e=c.shift();if(r={currentState:e,moves:i,settled:d.size,dropped:p,depth:e.getDepth(),haveSolution:!1},h=n,e.getState()?.toString()===h?.toString())return r.haveSolution=!0,a;const u=o(e.getState());t.forEach((t=>{const n=e?.getState()?.map((e=>[...e])),o={x:u.x+t.x,y:u.y+t.y,name:t.name};s(o)||([n[u.x][u.y],n[o.x][o.y]]=[n[o.x][o.y],n[u.x][u.y]],d.get(n.toString())?p++:(c.push(new l(n,e,t.name,e.getDepth()+1,0)),d.set(n.toString(),!0),a.push({state:n,index:i+2})),i++)}))}var h;return a}(p,g,[{state:p,index:1}]),d.disabled=!1,c.disabled=!1}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,